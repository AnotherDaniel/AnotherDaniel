<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://www.danielkrippner.de/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.danielkrippner.de/" rel="alternate" type="text/html" /><updated>2022-02-12T15:17:54-06:00</updated><id>https://www.danielkrippner.de/feed.xml</id><title type="html">messages from ENV</title><subtitle>Musings, thoughts, documentation about things that I'm doing to amuse myself</subtitle><author><name>Daniel Krippner</name><email>dk.mailbox@gmx.net</email></author><entry><title type="html">Simple Scanning Station</title><link href="https://www.danielkrippner.de/scanningstation" rel="alternate" type="text/html" title="Simple Scanning Station" /><published>2022-02-12T00:00:00-06:00</published><updated>2022-02-12T00:00:00-06:00</updated><id>https://www.danielkrippner.de/scanningstation</id><content type="html" xml:base="https://www.danielkrippner.de/scanningstation">&lt;p&gt;Mostly out of Corona-induced boredom I decided I wanted a document scanning pipeline to get any relevant paperwork into a document management system like doscpell, with as little effort (both cost-wise and from a UX perspective) as possible. So I built a simple and hands-off scanning station with my raspberry home automation system, running on 64bit Ubuntu and with mostly standard packages / components.
The scanning station works with a Fujitsu S1100 portable scanner, and implements a very simple workflow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;turn on scanner (by opening the front and top covers)&lt;/li&gt;
  &lt;li&gt;feed in the document to be scanned; this will start the scan and result in a pdf version of the document file appearing in the output folder&lt;/li&gt;
  &lt;li&gt;the single button of the S1100 is used to implement a multi-page document mode:
    &lt;ul&gt;
      &lt;li&gt;push the button to start multi-page mode&lt;/li&gt;
      &lt;li&gt;feed in document pages&lt;/li&gt;
      &lt;li&gt;push button again to end multi-page mode, resulting in a single pdf file with all scanned pages placed in output folder&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;close the scanner covers - done&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article gives a quick rundown of the configuration steps necessary to (re)create this setup. It is intended to work with a document management system like &lt;a href=&quot;https://docspell.org&quot;&gt;docspell&lt;/a&gt;, which consumes the generated scans and makes them available in a document database.&lt;/p&gt;

&lt;h2 id=&quot;saned&quot;&gt;saned&lt;/h2&gt;

&lt;p&gt;The fundamental building block for our scanner pipeline is of course &lt;a href=&quot;http://www.sane-project.org&quot;&gt;sane&lt;/a&gt;. Basic setup for the Fujitsu S1100 is quite simple and the device works out of the box - after adding the &lt;em&gt;.nal&lt;/em&gt; driver files from either the Windows driver CABs or the internet to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/sane/epjitsu/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This should be enough to fire up the scanner:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;start &lt;em&gt;saned&lt;/em&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo systemctl start saned.socket&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sane-find-scanner -q&lt;/code&gt;, make sure the device is listed&lt;/li&gt;
  &lt;li&gt;then try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanimage -L&lt;/code&gt;, which should result in the scanner buzzing a bit and a message that sane has identified and set up the device&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;If this results in permission errors, make sure the user you’re running this with is a mamber of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanner&lt;/code&gt; group (Ubuntu default setup), or prefix a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to these commands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scanservjs&quot;&gt;scanservjs&lt;/h2&gt;

&lt;p&gt;At this point it is possible to go ahead with a UI frontend for sane-scanning like &lt;a href=&quot;https://github.com/sbs20/scanservjs&quot;&gt;scanservjs&lt;/a&gt;.
I like to put things into containers as much as possible, for ease of deployment (especially, easy of re-creating deployments). &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanservjs&lt;/code&gt; is available as a docker image of course - below I include a simple docker-compose file to facilitate the deployment.&lt;/p&gt;

&lt;p&gt;There is one thing needed to make this work seamlessly from a docker container: while it is possible to map (usb) device inodes into the docker container, this only works as long as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/bus/usb/...&lt;/code&gt; entry for our scanner doesn’t change. Which it will as soon as we close/open the device cover flaps in between scanning sessions.&lt;/p&gt;

&lt;p&gt;To get around that, we can tell the natively running &lt;em&gt;saned&lt;/em&gt; to expose device access via a network port. To do this, add the container’s IP address range to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/saned.conf&lt;/code&gt; file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access List&lt;/code&gt; section. To find out what IP address the scanserv container is running with, use this command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container inspect scanservjs | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;IPAddress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my case I’m adding the following address block to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;saned.conf&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## Access List&lt;/span&gt;
172.21.0.1/24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside scanservjs’ docker container the sane service now needs to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net&lt;/code&gt; driver, and connect to the saned instance running on the host system. A rudimentary docker-compose file to make all of this happen looks like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scanservjs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;scanservjs&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;masterokhan/pi-scanservjs:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unless-stopped&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extra_hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;host.docker.internal:host-gateway&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SANED_NET_HOSTS=&amp;lt;host-address&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/opt/scanserv/output:/app/data/output'&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/opt/scanserv/config:/app/config'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unless-stopped&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;scanbd-and-scanbm&quot;&gt;scanbd and scanbm&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sbs20/scanservjs&quot;&gt;scanservjs&lt;/a&gt; is a smooth frontend for interactive scanning, and if that’s what is needed you’re done at this point.
However I want to build an automated scanning pipeline with as little user interaction needed as possible. So we are not looking for an interactive UI, but rather want to streamline the entire process.&lt;/p&gt;

&lt;p&gt;To do this we need a service that continuously polls the scanner for events like “button pressed” or “paper detected”, and directly initiates the scanning process.
As usual people have been there before, and have created the &lt;a href=&quot;https://manpages.debian.org/bullseye/scanbd/scanbd.8.en.html&quot;&gt;scanbd&lt;/a&gt; service to do just that. A quick &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install scanbd&lt;/code&gt; gets the necessary things in place, however our setup for scanbd is slightly more involved. I am not going to rehash all of the scanbd setup basics here, there are multiple &lt;a href=&quot;https://sodocumentation.net/raspberry-pi/topic/6701/create-a-scan-station-with-scanbd--raspbian-&quot;&gt;articles&lt;/a&gt; out there describing the steps.&lt;/p&gt;

&lt;p&gt;What is important:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;really copy &lt;strong&gt;all&lt;/strong&gt; files from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/sane.d/&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/scanbd/&lt;/code&gt; configuration; I initially forgot to include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sane.conf&lt;/code&gt;, which results in scanbm not working as expected&lt;/li&gt;
  &lt;li&gt;… &lt;em&gt;scanbm&lt;/em&gt; is a management-proxy in front of &lt;em&gt;scanbd&lt;/em&gt;, which monitors client interactions on the &lt;em&gt;saned&lt;/em&gt; port, and stops scanbd polling to allow other clients access to the scanner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More interesting is setting up the script actions for &lt;em&gt;scanbd&lt;/em&gt; to execute on various scanner events. To enable the workflow described above, my configuration reacts to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paperload&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scan&lt;/code&gt; events, which represent paper being fed and the button being pressed, respectively.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I wanted to use the powersave event as well, to clean up the multipage environment (see below), thinking that &lt;em&gt;powersafe&lt;/em&gt; would only occur when the scanner covers are being closed. Turns out the device enters powersave after a few seconds of inactivity, so I had to dismiss that idea.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanbd.conf&lt;/code&gt; file, plus the scripts in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanbd/scripts&lt;/code&gt;, contain the logic to implement our hands-off scanning station workflow. In principle there are two parts to make things work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on &lt;em&gt;paperload&lt;/em&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts/scan.script&lt;/code&gt; is started, which tells the scanner to
    &lt;ul&gt;
      &lt;li&gt;grab a tiff from the inserted document, into a tmp directory&lt;/li&gt;
      &lt;li&gt;convert that into a pdf file&lt;/li&gt;
      &lt;li&gt;move the pdf to the final output folder and clean up, &lt;strong&gt;unless&lt;/strong&gt; we are in multipage mode (see below)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;on &lt;em&gt;scan&lt;/em&gt; button press we initiate multi-page mode, which
    &lt;ul&gt;
      &lt;li&gt;creates a multipage-flag file on first press&lt;/li&gt;
      &lt;li&gt;if that flag is set during page scan, created documents are not moved to the final output folder but stay in the tmp folder, until&lt;/li&gt;
      &lt;li&gt;the &lt;em&gt;scan&lt;/em&gt; button is pressed a second time,&lt;/li&gt;
      &lt;li&gt;which collates all the collected single-page documents into one multipage pdf,&lt;/li&gt;
      &lt;li&gt;moves that into the output folder&lt;/li&gt;
      &lt;li&gt;and cleans everything up including the multipage-flag file&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Look at the scripts for details on how things work. The main thing to be mindful of is setting up the scripts and folders with the necessary permissions so that everything can work as desired. I am doing the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanbd.conf&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts/*&lt;/code&gt; are managed in a gitlab repository, and checked out locally into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/scanserv/scanbd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/scanbd/scanbd.conf&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/scanbd/scripts/&lt;/code&gt; are links to that local repo&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tmp&lt;/code&gt; folders are also located in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/scanserv/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;saned&lt;/em&gt; and &lt;em&gt;scanbd&lt;/em&gt; deamons run as user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;saned&lt;/code&gt;, group &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanner&lt;/code&gt; by default, so we allow the required access to these folders:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;chmgrp &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; scanner /opt/scanserv/output /opt/scanserv/temp
&lt;span class=&quot;nb&quot;&gt;sudo chmod&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; g+w /opt/scanserv/output /opt/scanserv/tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Testing all of this can be done by running the scripts individually - just keep in mind that you’re likely going to do that with a different user than what &lt;em&gt;saned&lt;/em&gt; will be using. The scripts contain syslog output that can he observed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tail -f /var/log/syslog&lt;/code&gt;.
Once everything appears to work, start the &lt;em&gt;scanbd&lt;/em&gt; and &lt;em&gt;scanbm&lt;/em&gt; deamons using&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start scanbd.service
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start scanbm.socket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once all of this is running, instruct the document management system to pick up files from the output folder defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanbd/scripts/vars.scripts&lt;/code&gt; - this is also where other relevant directories and properties for the scanning setup are defined.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;waymarks&quot;&gt;Waymarks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Apple Support is good - not surprising considering the cost of the products, but good people there.&lt;/li&gt;
  &lt;li&gt;I now own an Apple USB-A adapter - I guess there’s no turning back after this point.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniel Krippner</name><email>dk.mailbox@gmx.net</email></author><summary type="html">Mostly out of Corona-induced boredom I decided I wanted a document scanning pipeline to get any relevant paperwork into a document management system like doscpell, with as little effort (both cost-wise and from a UX perspective) as possible. So I built a simple and hands-off scanning station with my raspberry home automation system, running on 64bit Ubuntu and with mostly standard packages / components. The scanning station works with a Fujitsu S1100 portable scanner, and implements a very simple workflow:</summary></entry><entry><title type="html">3 Mac keyboards</title><link href="https://www.danielkrippner.de/mackeyboard" rel="alternate" type="text/html" title="3 Mac keyboards" /><published>2022-02-11T00:00:00-06:00</published><updated>2022-02-11T00:00:00-06:00</updated><id>https://www.danielkrippner.de/mackeyboard</id><content type="html" xml:base="https://www.danielkrippner.de/mackeyboard">&lt;p&gt;Quick interlude: the &lt;a href=&quot;https://www.danielkrippner.de/mackeyboard&quot;&gt;Apple keyboard love&lt;/a&gt; seems to go both ways. A couple of weeks ago, the keyboard of the barely 2 months old M1 Macbook Pro died. Just like that - no keypresses registered any more, backlight off, rebooting etc didn’t to anything. The touchpad continued to funtion normally, however.&lt;/p&gt;

&lt;h2 id=&quot;clever-boot-options-ux-choices&quot;&gt;Clever boot options UX choices&lt;/h2&gt;

&lt;p&gt;The only thing that still operated was the power button/key - enough to turn the machine off and on, and to enter the boot options menu. There is an option for booting into Safe Mode - that requires the shift key to be pressed when clicking the corresponding option. Duh.
I do have a external USB keyboard available of course - but no 30 bucks Apple USB-A Adapter. Just a ‘regular’ one that of course didn’t do anything when connected to the Mac.&lt;/p&gt;

&lt;h2 id=&quot;repair-1&quot;&gt;Repair #1&lt;/h2&gt;

&lt;p&gt;Allright - so let’s test Apple customer service. Called the hotline (looong wait time!), which ended in the Apple support engineer setting up a Genius Bar appointment at the closes Apple Store. Or trying to, because the reservation system was acting funky… Having been pointed at that though, I registered an appointment on my own some hours later.
Had to wait a couple of days for that session, because of course the keyboard died on a Saturday and the next time slot I could make available for the Store visit was Tuesday. Anyways, went there and sat with the nice support guy who did diagnostics and took my computer in for repair.
Two days later I was texted to collect my machine again, which I did. They replaced the top-cover-cum-keyboard, plus some other stuff - got to keep the disk and data though.&lt;/p&gt;

&lt;h2 id=&quot;repair-2&quot;&gt;Repair #2&lt;/h2&gt;

&lt;p&gt;… and was able to work with the computer until the next day. Because the next day, the keyboard died again. Did I mention that this is by far the most expensive piece of hardware I ever bought? First Apple computer I ever bought? Going splendidly, so far.
Being wise to the Genius Bar thing, I did the moves again and brought the computer in again. This time they sent it off to a repair center one country over, to be gone about a week. I didn’t have to drive to the Store and back again to pick it up, but the machine was sent to my home address one week later as promised. They replaced “more” - mainboard, disk, topcase, etc. Probably the only thing untouched is the serial number.&lt;/p&gt;

&lt;h2 id=&quot;backup-restore---what&quot;&gt;Backup restore - what?&lt;/h2&gt;

&lt;p&gt;With the Mac back with an new disk, I wanted to make use of my time machine backup to get back up and running. That turned out to be another strange experience: starting up I was given the option to restore from backup - nice! Selected that, it went and copied files for a couple of hours. When that was done I was asked to create a new user. Wait - if my user hasn’t been (re)created with the restore, where the heck did it just copy all that data to?! Turns out that this is indeed a good question, one without an answer. Because when logging in with the newly created user the disk was “empty”, as in “the 200GB that should have been taken up with restored data are nowhere to be found”.
Oh well, ok then. I know how I’ll be spending the evening.&lt;/p&gt;

&lt;h2 id=&quot;mixed-bag&quot;&gt;Mixed bag&lt;/h2&gt;

&lt;p&gt;This episode left me with mixed feelings. The definive downer is the obvious fact that a very expensive piece of supposedly high-end kit breaks after just 2 months of light use. I’ve never had this kind of issue with any notebook, in 20 years of continually working with many different makes&amp;amp;models (never Apple, though). So to experience this with the first Apple computer I’m using in my life is a bummer, and hopefully a definitive outlier. This also better not happen after warranty - the repair bills (that I didn’t have to pay but have seen nonetheless) are no joke.&lt;/p&gt;

&lt;p&gt;Also irritating are the strange design choices Apple has made especially around how backup-restore onto a fresh machine works. I stronly suspect that this was a case of PEBKAC - but if Apple UX is so great then this sort of user error just should not happen. That it is not possible to use either mouse/trackpad &lt;em&gt;OR&lt;/em&gt; keyboard to boot into safe mode is a niche issue, but an avoidable one - if you’d prioritize robustness over design aesthetics.&lt;/p&gt;

&lt;p&gt;The upshot is that in those two weeks I missed the Mac quite a bit. I wanted to do stuff, and while this machine for me is pure private plaything and there’s no deadlines or anything, I really was looking forward to getting it back.
Finally I believe there is a strong case of buy-in-bias at work here. I’ve now invested emotions and quite some extra time into this thing (3 trips to the Apple Store and back at 30 mins each…), I’m growing attached.&lt;/p&gt;

&lt;p&gt;So please, just work now!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;waymarks&quot;&gt;Waymarks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Apple Support is good - not surprising considering the cost of the products, but good people there.&lt;/li&gt;
  &lt;li&gt;I now own an Apple USB-A adapter - I guess there’s no turning back after this point.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniel Krippner</name><email>dk.mailbox@gmx.net</email></author><summary type="html">Quick interlude: the Apple keyboard love seems to go both ways. A couple of weeks ago, the keyboard of the barely 2 months old M1 Macbook Pro died. Just like that - no keypresses registered any more, backlight off, rebooting etc didn’t to anything. The touchpad continued to funtion normally, however.</summary></entry><entry><title type="html">Of course we (only) do AirPrint!</title><link href="https://www.danielkrippner.de/airprint" rel="alternate" type="text/html" title="Of course we (only) do AirPrint!" /><published>2021-12-21T00:00:00-06:00</published><updated>2021-12-21T00:00:00-06:00</updated><id>https://www.danielkrippner.de/airprint</id><content type="html" xml:base="https://www.danielkrippner.de/airprint">&lt;p&gt;After approximately one month, the Apple journey is going well. Even picking up speed one could say, as I’m beginning to feel comfortable, or even at home a lot of the time. Still not closer to appreciating how the application switcher works, though ;-)&lt;/p&gt;

&lt;p&gt;As I’ve done a full ecosystem switch, including mobile phone and tablet, also for these devices there is a need to interoperate with things like printers that exist in our household. This writeup is about how that worked out for me.&lt;/p&gt;

&lt;h2 id=&quot;cups-is-an-apple-project-so-how-hard-can-it-be&quot;&gt;CUPS is an Apple project, so how hard can it be?&lt;/h2&gt;

&lt;p&gt;Although I did not realize this before, the venerable &lt;a href=&quot;https://www.cups.org&quot;&gt;CUPS printing system&lt;/a&gt; is an Apple-driven project. That is good. Especially because Apple products (iOS devices, specifically) don’t do anything with IPP, nor could I find a manufacturer ‘driver app’ to connect with our little oldish Samsung color laser printer. Instead, Apple products are looking for AirPrint devices…&lt;/p&gt;

&lt;p&gt;As I have a Raspberry Pi running our home automation, DNS filter and a bunch of other around-the-house services, there should be something we can do with that. Open source to the rescue: of course there is! A combination of CUPS and &lt;a href=&quot;https://avahi.org&quot;&gt;Avahi&lt;/a&gt; will act as a relay, making CUPS-driven printers available in the local network via Avahi service discovery.&lt;/p&gt;

&lt;p&gt;A first quick trial, installing CUPS and Avahi directly in the Pi’s Ubuntu host system, proves that this works quite painlessly. But all other workloads on my Pi are containerized and designed to make the overall setup as reproducible and modular as possible…&lt;/p&gt;

&lt;h2 id=&quot;is-there-anything-out-there&quot;&gt;Is there anything out there?&lt;/h2&gt;

&lt;p&gt;Yes and no. What we want is a ready-made docker image that acts as our AirPrint relay, with minimal configuration and fuss needed. There are some Docker recipes, many of which seem to be descendants of &lt;a href=&quot;https://github.com/quadportnick/docker-cups-airprint&quot;&gt;quadportnicks docker-cups-avahi project&lt;/a&gt;, with associated images on dockerhub. I couldn’t find one that worked for me though - I was looking for a combination of arm64 support, included drivers for my Samsung printer, and maybe not being abandoned years ago.
So after looking around a bit, I decided to hit that fork button and adapt something for my needs.&lt;/p&gt;

&lt;h2 id=&quot;what-do-we-want&quot;&gt;What do we want?&lt;/h2&gt;

&lt;p&gt;My AirPrint relay image should have the following properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Include drivers for my printer, of course. Maybe even be a generic thing that comes with all available drivers, to become more widely useful?&lt;/li&gt;
  &lt;li&gt;Allow persistent storage of printer-related configuration outside of the container image, while stuff like cups configuration should ‘just work’ and stay out of the way otherwise.&lt;/li&gt;
  &lt;li&gt;Size is a concern too, within limits - generic usefulness means we won’t optimize for size, but no need to be wasteful either.&lt;/li&gt;
  &lt;li&gt;Support for 64bit arm architectures. Maybe even go multi-arch?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The aforementioned cups-avahi-airprint project does cover a lot of these bases already, so let’s fork that. Actually, I forked &lt;a href=&quot;https://github.com/chuckcharlie/cups-avahi-airprint&quot;&gt;a fork&lt;/a&gt; of that project, for no good reason other than that I’ve been looking at it at the time.&lt;/p&gt;

&lt;h2 id=&quot;building-an-airprint-relay&quot;&gt;Building an &lt;a href=&quot;https://github.com/AnotherDaniel/airprint-relay&quot;&gt;AirPrint Relay&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;There was actually a reason for basing off chuckcharlies version of cups-avahi-airprint: I liked the idea of using Alpine as base image. However, after spending too much time trying to find out whether my old Samsung CLP-365 was supported by any package on that distro and not finding anything useful, I reverted the build back to Ubuntu (my printer is supported by ubuntu package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printer-driver-foo2zjs&lt;/code&gt;). Ubuntu does provide a quite minimal base image for docker stuff, and while it is not as small as Alpine, I was willing to take the size hit to just get my printer supported and move on with things.&lt;/p&gt;

&lt;p&gt;The switch to Ubuntu brought one problem: during build, the systems wants manual input for configuring the tzdata package. Luckily the internet has a solution for that (&lt;a href=&quot;https://github.com/AnotherDaniel/airprint-relay/blob/master/Dockerfile&quot;&gt;see the Dockerfile&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Next step: add all printer drivers to the image build that I could find. I’ll thank myself in the future should I ever switch hardware, plus maybe this way the image becomes useful for other people too.&lt;/p&gt;

&lt;p&gt;That’s most of the visible changes already. I spent a lot of time learning how to get this image to correctly register with my Traefik router, so that the CUPS dashboard becomes reachable via a nice name instead of IP and port. The problem was that CUPS refuses requests that come with a wrong host entry in the header (wrong as far as CUPS is concerned). The fix for that is a combination of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cupsd.conf&lt;/code&gt; and Traefik settings:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cupsd.conf&lt;/code&gt; should contain the following lines&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*:631&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# this replaces the default 'Listen ...' directive
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ServerAlias&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This Traefik label is needed in the AirPrint Relay docker-compose.yml:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik.http.services.airprint-relay.loadbalancer.passhostheader=false&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The latter took me quite some digging to figure out - but with these, Traefik routing works for me.&lt;/p&gt;

&lt;p&gt;The original project came with some scripting- and Python magic for handling CUPS startup and Avahi service file creation from CUPS-configured printers, which I didn’t change much beyond minor naming convention alignments and adaptions around current Ubuntu versions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adduser&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addgroup&lt;/code&gt;. Oh, and I fixed one of the Python-generated Avahi service fields to provide printer location (as it’s used by MacOS), instead of printer info.&lt;/p&gt;

&lt;p&gt;The final steps were brushing up the project README, and adding a multi-arch build action following the regular &lt;a href=&quot;https://www.docker.com/blog/multi-arch-build-and-images-the-simple-way/&quot;&gt;docker documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The Result&lt;/h2&gt;

&lt;p&gt;The result of all of this is available for easy consumption from &lt;a href=&quot;https://hub.docker.com/r/agoodcontainer/airprint-relay&quot;&gt;dockerhub&lt;/a&gt; - a one-click solution for deploying an AirPrint relay service into your home network.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;waymarks&quot;&gt;Waymarks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;AirPrint is a sweet user experience, once it works&lt;/li&gt;
  &lt;li&gt;I came across the &lt;a href=&quot;https://ohmyz.sh&quot;&gt;oh-my-zsh project&lt;/a&gt;, which boosts working with a shell to a new level&lt;/li&gt;
  &lt;li&gt;If you’re feeling festive, &lt;a href=&quot;https://github.com/chockenberry/Notchmeister&quot;&gt;Notchmeister will deliver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniel Krippner</name><email>dk.mailbox@gmx.net</email></author><summary type="html">After approximately one month, the Apple journey is going well. Even picking up speed one could say, as I’m beginning to feel comfortable, or even at home a lot of the time. Still not closer to appreciating how the application switcher works, though ;-)</summary></entry><entry><title type="html">Two weeks of Apple</title><link href="https://www.danielkrippner.de/after-two-weeks" rel="alternate" type="text/html" title="Two weeks of Apple" /><published>2021-11-29T00:00:00-06:00</published><updated>2021-11-29T00:00:00-06:00</updated><id>https://www.danielkrippner.de/after-two-weeks</id><content type="html" xml:base="https://www.danielkrippner.de/after-two-weeks">&lt;p&gt;It’s been two weeks now since I started to grow my Apple garden - one of the M1 MacBooks, a current iPhone, and recently a M1 iPad to complement my core device needs. The major rants I just had to get off my chest were about the &lt;a href=&quot;https://www.danielkrippner.de/mackeyboard&quot;&gt;keyboard layout&lt;/a&gt;, and the &lt;a href=&quot;https://www.danielkrippner.de/appswitcher&quot;&gt;Application Switcher&lt;/a&gt;.
Since then I’ve been playing with the system, getting used to things. This is an update and comment on some of the things I’ve been thinking.&lt;/p&gt;

&lt;h2 id=&quot;keyboard-revisited&quot;&gt;Keyboard revisited&lt;/h2&gt;

&lt;p&gt;After about a week I’m actually getting used to this layout, and (mostly) don’t need to look up the locations of special characters any more. I’m still not enthusiastic about the modifier key proliferation, but I get by… to the point where the keyboard on my work machine is beginning to throw me off :-)
There is one thing that I’m really not happy with, on a professional machine in this price range: the ridiculous half-size up-down cursor keys.&lt;/p&gt;

&lt;h2 id=&quot;app-switcher&quot;&gt;App Switcher&lt;/h2&gt;

&lt;p&gt;I’m not really using the App Switcher, thus avoiding being annoyed by it. Funnily, the one App that I actually don’t want to re-appear when minimized apparently is buggy, and does. Sigh.
I still think that having minimized Apps appear in the switcher without being able to do anything with them is the stupidest UX ever.&lt;/p&gt;

&lt;h2 id=&quot;browser-trials&quot;&gt;Browser trials&lt;/h2&gt;

&lt;p&gt;An advanced symptom of my Appleification process might be the fact that I’m trying to switch to Safari as my main browser. It is clean and fast, that I like. Beyond bookmarks, there’s no sync options to any other browsers, which is not nice for poly-system users. One thing that Safari makes very visible is the monetization of almost everything within the Apple ecosystem.&lt;/p&gt;

&lt;h2 id=&quot;everything-costs-almost&quot;&gt;Everything costs (almost)&lt;/h2&gt;

&lt;p&gt;Coming from Linux and Android, I am not too thrilled about the state of OSS software in the Apple ecosystem. The main applications exist, that is fine. But there seems to be little room/motivation for high-quality smaller projects that are abundant in Linux, and still quite present in an Android context.
And: almost everything costs money, especially via the App Store(s). With an unhealthy tendency towards subscription models, which I simply don’t like very much. Little surprise I guess, but it can be off-putting.&lt;/p&gt;

&lt;h2 id=&quot;there-is-something&quot;&gt;There is something&lt;/h2&gt;

&lt;p&gt;All of the niggly things aside, there is something about this line of products, how different devices feel like part of a family, how things normally just work. Except for the stock Mac Photos app, but that’s a story in itself.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;waymarks&quot;&gt;Waymarks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Not entirely surprising, I’m getting used to Apple. It certainly still is intriguing enough to keep playing and learning.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniel Krippner</name><email>dk.mailbox@gmx.net</email></author><summary type="html">It’s been two weeks now since I started to grow my Apple garden - one of the M1 MacBooks, a current iPhone, and recently a M1 iPad to complement my core device needs. The major rants I just had to get off my chest were about the keyboard layout, and the Application Switcher. Since then I’ve been playing with the system, getting used to things. This is an update and comment on some of the things I’ve been thinking.</summary></entry><entry><title type="html">MacOS Application Switcher</title><link href="https://www.danielkrippner.de/appswitcher" rel="alternate" type="text/html" title="MacOS Application Switcher" /><published>2021-11-21T00:00:00-06:00</published><updated>2021-11-21T00:00:00-06:00</updated><id>https://www.danielkrippner.de/appswitcher</id><content type="html" xml:base="https://www.danielkrippner.de/appswitcher">&lt;p&gt;The MacOS application switcher is my second-biggest gripe after the keyboard layout. I am getting better with remembering which modifier keys to press when, as expected. So let’s get to the second thing that will probably pale with routine: the Application Switcher (the thing you get when pressing command-Tab).&lt;/p&gt;

&lt;h2 id=&quot;minimizing-hiding-obscuring&quot;&gt;Minimizing, Hiding, Obscuring&lt;/h2&gt;

&lt;p&gt;The core of my issue with the App Switcher boils down to: ‘why the heck does it cycle through application icons that have no action associated with them?’ Which, with some searching, gets me to ‘who thought of this hiding vs minimizing concept, and what were they thinking??’.&lt;/p&gt;

&lt;p&gt;So I can minimize windows, which is a first-level UI function there’s that little yellow button at the top-left of app windows, after all. Minimized windows/apps show up in the icon list of the App Switcher - but selecting them does not do anything. At all.
Then, windows can be minimized - this is not a first-level feature, but requires a keyboard shortcut. Hidden windows also show up in the app switcher, and if I select them they pop up again.
What I could have gotten is minimized things being really minimized, not cluttering the switcher - and then ok, if hiding is a thing for people, let’s have that too. But getting back to the core issue: why does the switcher show me stuff (cluttering up the icon list) that I cannot do anything with?
This is actually the worst UI design idea that I’ve come across in many years.
There are two concepts here that do a similar thing from the user’s point of view, behave completely differently, and are making a very core UI concept (app switcher) mostly useless in the process.
Think differently, indeed.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;waymarks&quot;&gt;Waymarks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The MacOS App Switcher is conceptually kaputt, by showing stuff that does not do anything at all for the user.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniel Krippner</name><email>dk.mailbox@gmx.net</email></author><summary type="html">The MacOS application switcher is my second-biggest gripe after the keyboard layout. I am getting better with remembering which modifier keys to press when, as expected. So let’s get to the second thing that will probably pale with routine: the Application Switcher (the thing you get when pressing command-Tab).</summary></entry><entry><title type="html">Mac Keyboard</title><link href="https://www.danielkrippner.de/mackeyboard" rel="alternate" type="text/html" title="Mac Keyboard" /><published>2021-11-20T00:00:00-06:00</published><updated>2021-11-20T00:00:00-06:00</updated><id>https://www.danielkrippner.de/mackeyboard</id><content type="html" xml:base="https://www.danielkrippner.de/mackeyboard">&lt;p&gt;I’m probably going to have a trend in my Apple-related posts, where I’m going from mostly negative as I get used to things to more positive as I’m coming to grips with the system. So let’s get the biggest gripe out of the way first: the keyboard layout. I knew from afar that Apple has it’s own view on what a decent keyboard looks like - and I’m not talking about the touch bar. Ok so everybody’s to have their own special key, we know that. But there is a few things that I was not expecting.&lt;/p&gt;

&lt;h2 id=&quot;missing-keys&quot;&gt;Missing keys&lt;/h2&gt;

&lt;p&gt;I am completely dependent on basic navigation keys for moving around in documents, code, web pages etc - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PageUp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PageDown&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Home&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;End&lt;/code&gt; (let’s not even mention the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delete&lt;/code&gt; key). And ordering a 16” laptop I didn’t even think of the possibility that these keys might simply not be there. Ok, as this is Apple we’re talking about, these keys probable are nonexistent on any of their hardware. But why? Is this a design thing where “we can’t have too many keys, people would get confused!”?
The issue synergistically combines with these aggravating half-size cursor keys - because if you have to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Function&lt;/code&gt;-cursor key combinations to substitute, then let’s make this workaround as fiddly as we possibly can? Looking at lists of keyboard shortcuts in MacOS, I get the impressions that the keyboard is actually a first-level citizen for interacting with the system. But for (cursor) navigation, you better bring small fingers and large amounts of patience.
This leads to the next item in my list:&lt;/p&gt;

&lt;h2 id=&quot;modifier-madness&quot;&gt;Modifier madness&lt;/h2&gt;

&lt;p&gt;On a standard PC keyboard we’ve got &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Control&lt;/code&gt; keys as often-used modifiers. Sometimes, seldomly, there’s that Windows key, which is not really that useful these days. So that is 3 relevant modifier keys.
On the Mac we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Function&lt;/code&gt; (needed because of missing basic navigation keys, see above), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Control&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Option&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt;. That is 5 relevant modifier keys. Which are continually needed in various combinations for moving cursor, selecting text, moving between Desktops, switching application tabs, etc. Remembering and trial-erroring my way through this combinatorial jungle is not fun, and I’m not doing anything more than I used to on a Linux/Gnome system at this point. I mean I wanted to learn new stuff and don’t mind getting more dexterity on the small fingers of my left hand. But considering that by simply adding 4-5 fundamental keys &lt;strong&gt;that everyone else has as a matter of course&lt;/strong&gt;, this wouldn’t even be worth mentioning - this feels like needless complexity.&lt;/p&gt;

&lt;h2 id=&quot;and-why-the-heck-cant-we-just-know-what-a-key-does&quot;&gt;And why the heck can’t we just know what a key does?!&lt;/h2&gt;

&lt;p&gt;Because constantly juggling 5-modifier-key-combos is not sufficient fun, there is an added twist to a Mac keyboard: all the special symbols that go beyond a very simplistic base set are there - somewhere. A Mac is a Unix system - but curly/angled brackets, pipe, tilde, backslash etc are simply not ‘mentioned’ anywhere on this keyboard. Things that are needed all the time in a terminal.
Of course they’re not in the same locations as everybody else’s keyboard, that would have been too easy. So I’m having to look this up in search engines, just to be able to interact with the shell and write code.
What is this supposed to achieve, keep the keyboard looking tidier? This is my first exposure to the hallowed Apple User Experience on one of their top-range products, and I am actually pissed.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;waymarks&quot;&gt;Waymarks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The Apple keyboard layout simply sucks, and to add insult to injury you need cheat sheets to even find stuff!&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniel Krippner</name><email>dk.mailbox@gmx.net</email></author><summary type="html">I’m probably going to have a trend in my Apple-related posts, where I’m going from mostly negative as I get used to things to more positive as I’m coming to grips with the system. So let’s get the biggest gripe out of the way first: the keyboard layout. I knew from afar that Apple has it’s own view on what a decent keyboard looks like - and I’m not talking about the touch bar. Ok so everybody’s to have their own special key, we know that. But there is a few things that I was not expecting.</summary></entry><entry><title type="html">Apple Products</title><link href="https://www.danielkrippner.de/apple" rel="alternate" type="text/html" title="Apple Products" /><published>2021-11-17T00:00:00-06:00</published><updated>2021-11-17T00:00:00-06:00</updated><id>https://www.danielkrippner.de/apple</id><content type="html" xml:base="https://www.danielkrippner.de/apple">&lt;p&gt;After spending almost all of my over 25 years long ‘computing life’ with Windows and especially Linux systems, with the recent advent of M1 silicon and in light of the constant superiority complex that Apple users project into their surroundings, I decided it was time to finally take a peek into that particular walled garden myself. So as both my old Pixel phone and Linux notebook were nearing their end-of-useful-life (no more updates / too slow, respectively) I ordered an iPhone 13 and a 16” MacBook the day the M1 machines were announced by Apple. The ordering process was quite smooth, leading me to a mid-range-of-the-high-end M1 Max with 32Gigs of RAM and the smallest disk option. The rationalization for spending this much money on just two devices is still ongoing…&lt;/p&gt;

&lt;h2 id=&quot;what-is-this-then&quot;&gt;What is this, then?&lt;/h2&gt;

&lt;p&gt;I’ll be writing down the major observations and thoughts as I’m getting used to MacOS and the M1 MacBook - if just for an opportunity to come to grips with the keyboard on this thing.
As mentioned above, I’ve been using computers for more than a quarter of a century now, starting with MS DOS on a 80286 system that even a current SSD cache controller would regard with pity. Went through various iterations of DOS, worked with Windows 3.x and wondered what the fuss was about, then 95, NT, Vista and so on. Sometimes during the 95 - NT era I was exposed to Linux and the open source way of thinking about software. The first system I really got into was RedHat Linux I believe, not counting a superficial run-in with various Unix flavors at university. After very few months I migrated all of my ‘serious’ computing to Linux systems, and haven’t looked back since. Moved through distros for some years, everything from Mandrake, Debian, and some more esoteric ones until I’ve settled on Ubuntu quite a few years ago.
What I never touched at all was Apple systems - couldn’t stand the walled-in feeling I got with any of their devices, and was not amused by the preachiness of the fanboys and this obnoxious &lt;em&gt;think differently&lt;/em&gt; attitude (&lt;em&gt;think differently&lt;/em&gt; - from a group of products that couldn’t be more uniform!).&lt;/p&gt;

&lt;h2 id=&quot;so-whats-changed&quot;&gt;So what’s changed?&lt;/h2&gt;

&lt;p&gt;Good question, not entirely sure. It is a combination of things:
-Timing of Apple M1 silicon product announcements in relation to my old devices getting old
-Availability (lack thereof) of relevant AMD Zen3 notebooks
-Even though I’m not using most Google services thanks to Nextcloud, a desire to &lt;a href=&quot;https://digital-rights.github.io/2021/01/24/the-product.html&quot;&gt;stop being the product&lt;/a&gt; regarding the mobile device ecosystem I live in
-A lack of interesting vanilla-Android tablet products
-Fascination with the Apple M1 move. I love bold new stuff…
-A certain expectation wrt UX and inter-device goodness, by getting everything from one source
-Interest in getting into MacOS, seeing how things work there, finally learning that system
-Some expectations for a more polished experience, based on complete vertical integration of the entire product
-Being old enough to finally afford Apple stuff, even though it still hurts somewhat
-… and finally wanting to know what all the fuss is about!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;waymarks&quot;&gt;Waymarks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The unboxing experience with Apple stuff is just plain amazing, the packaging is sexy and feels like it alone is worth a decent share of the product price. That is nice!&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniel Krippner</name><email>dk.mailbox@gmx.net</email></author><summary type="html">After spending almost all of my over 25 years long ‘computing life’ with Windows and especially Linux systems, with the recent advent of M1 silicon and in light of the constant superiority complex that Apple users project into their surroundings, I decided it was time to finally take a peek into that particular walled garden myself. So as both my old Pixel phone and Linux notebook were nearing their end-of-useful-life (no more updates / too slow, respectively) I ordered an iPhone 13 and a 16” MacBook the day the M1 machines were announced by Apple. The ordering process was quite smooth, leading me to a mid-range-of-the-high-end M1 Max with 32Gigs of RAM and the smallest disk option. The rationalization for spending this much money on just two devices is still ongoing…</summary></entry><entry><title type="html">Add a second hall sensor to Sonoff SV Garage Door Opener</title><link href="https://www.danielkrippner.de/sonoffsensor" rel="alternate" type="text/html" title="Add a second hall sensor to Sonoff SV Garage Door Opener" /><published>2021-05-30T00:00:00-05:00</published><updated>2021-05-30T00:00:00-05:00</updated><id>https://www.danielkrippner.de/sonoffsensor</id><content type="html" xml:base="https://www.danielkrippner.de/sonoffsensor">&lt;p&gt;Over a year ago I was in the process of automating things around the house, having recently discovered Raspberry Pi-driven home automation and the associated potential for “fiddling with things”.
During this phase, I came across the excellent &lt;a href=&quot;https://www.hagensieker.com/wordpress/2019/02/18/sonoff-sv-for-garage-door-opener/&quot;&gt;John’s Tech Blog writeup on how to automate garage door openers using Sonoff SV boards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This setup uses one reed switch (open/close switch) to sense the garage door state. One sensor is not a lot for a garage door - you can know with certainty whether it’s closed (or opened, wherever you installed your sensor), but other than that the door might be in any position and the home automation wouldn’t have a chance to know. So I wanted to complement this straight away with a second sensor, for sensing both ‘open’ and ‘closed’ positions. Being lazy, I simply added a ZigBee open/close sensor. Which required a ZigBee repeater in the garage. And worked mostly, but wasn’t the most reliable setup imaginable.&lt;/p&gt;

&lt;h2 id=&quot;more-is-better&quot;&gt;More is better&lt;/h2&gt;

&lt;p&gt;Some months later, looking at the Sonoff SV GPIOs and the associated Tasmota firmware config options, I thought that I should be able to add a second hardwired reed switch to my setup, allowing me to get rid of the ZigBee sensor.
At this point, a quick shoutout for the &lt;a href=&quot;https://itead.cc/product/sonoff-sv/&quot;&gt;Sonoff SV&lt;/a&gt;, as well as the &lt;a href=&quot;https://tasmota.github.io/docs/&quot;&gt;Tasmota firmware project&lt;/a&gt; for ESP8266 devices! These little boards are marvelous playthings, not expensive, and provide electronics noobs like myself with an accessible sense of achievement.&lt;/p&gt;

&lt;h2 id=&quot;second-sensor-setup&quot;&gt;Second sensor setup&lt;/h2&gt;

&lt;p&gt;The main part of the install involved preparing and running cables, getting worked up over cheap connectors, and some of the peculiarities or our garage door installation.
The actual sensor setup is pretty straightforward, mirroring the first as described by John (see above):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I used IO4, which is located right next to the IO14 pins of the first sensor&lt;/li&gt;
  &lt;li&gt;In the Tasmota config UI, set the GPIO4 to “Switch” “3”&lt;/li&gt;
  &lt;li&gt;(this mirrors the first switch, which is using GPIO14 “Switch” “2”)&lt;/li&gt;
  &lt;li&gt;To make the reed switch work properly, run the console command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SwitchMode3 2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it! The sensor status should now show up in the corresponding MQTT channel, in my case that is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmnd/&amp;lt;boardId&amp;gt;/POWER3&lt;/code&gt;. And no, I have no clue why a GPIO input status is mapped onto a ‘cmnd’ topic…&lt;/p&gt;

&lt;h2 id=&quot;home-assistant-wrapup&quot;&gt;Home assistant wrapup&lt;/h2&gt;

&lt;p&gt;The rest is even simpler - a straight copy of the first sensor configuration in the home assistant setup, in my case the sensors for one Sonoff SV board look like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mqtt&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Tasmota1_Status&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;unique_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sensor.tasmota1.status&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;expire_after&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;604800&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;qos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;state_topic&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tele/&amp;lt;boardId&amp;gt;/LWT&quot;&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mqtt&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Tasmota1_Open&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;unique_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sensor.tasmota1.open&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;expire_after&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;604800&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;qos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;state_topic&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cmnd/&amp;lt;boardId&amp;gt;/POWER2&quot;&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mqtt&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Tasmota1_Close&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;unique_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sensor.tasmota1.close&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;expire_after&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;604800&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;qos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;state_topic&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cmnd/&amp;lt;boardId&amp;gt;/POWER3&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Voila! In my case, one of the things I’m doing with this is setting the value of a home assistant Dropdown Helper to “closed”, “opening”, “open”, “closing” - depending on the statue changes of the two sensors. And I can actually trust this info now!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;waymarks&quot;&gt;Waymarks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;always verify sensor installation location by observing full movement range of garage doors :-D&lt;/li&gt;
  &lt;li&gt;I should have done this earlier&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniel Krippner</name><email>dk.mailbox@gmx.net</email></author><summary type="html">Over a year ago I was in the process of automating things around the house, having recently discovered Raspberry Pi-driven home automation and the associated potential for “fiddling with things”. During this phase, I came across the excellent John’s Tech Blog writeup on how to automate garage door openers using Sonoff SV boards.</summary></entry><entry><title type="html">Switch home assistant entity via command-line</title><link href="https://www.danielkrippner.de/hassapi" rel="alternate" type="text/html" title="Switch home assistant entity via command-line" /><published>2021-05-07T00:00:00-05:00</published><updated>2021-05-07T00:00:00-05:00</updated><id>https://www.danielkrippner.de/hassapi</id><content type="html" xml:base="https://www.danielkrippner.de/hassapi">&lt;p&gt;The last few days we paused on the journey, doing real-world things involving a guitar and some frustration.
Tonight, there was an idea I wanted to follow up on: when I cobbled together my Raspi k8s cluster, I grabbed a zigbee power switch I had lying around, to be able to switch the entire cluster on or off easily.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/RaspiCluster.png&quot; alt=&quot;Stack of Raspberry Pis and a zigbee power switch&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With that I can switch the cluster with a physical button, or via the web UI of my home assistant installation (or a widget on my smartphone, etc pp). But I was thinking that I’d also like a way to do this switching from the command line of my computer. When the mood takes me, I’m going to be fooling around in a shell anyways, so a shell command would be much more seamless than going via the HA lovelace dashboard!&lt;/p&gt;

&lt;h2 id=&quot;api-first&quot;&gt;API first&lt;/h2&gt;

&lt;p&gt;As there’s an integration for homeassistant for anything and everything, I set out to look for an extension to make device switching available via REST API. Immediately I found documentation for various REST integrations of home assistant, for allowing switching of GPIO pins… or integrating other REST-style APIs as sensors/switches into HA.
Hm. I must be missing something fundamental.&lt;/p&gt;

&lt;h2 id=&quot;api-the-second&quot;&gt;API, the second&lt;/h2&gt;

&lt;p&gt;And I was! Turns out the functionality I’m looking for is actually built into home assistant, just requires enabling by putting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api:&lt;/code&gt; as a top-level entry into the HA configuration.yml.&lt;/p&gt;

&lt;p&gt;Restart home assistant and run curl against a test endpoint: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl 192.168.0.x:8123/api/states&lt;/code&gt;, which gets us a ‘not authorized’ response. Good - there’s something there, then.
The excellent &lt;a href=&quot;https://developers.home-assistant.io/docs/api/rest/&quot;&gt;home assistant documentation&lt;/a&gt; mentions that we need to use an access token for this, so we do what’s necessary - e’voila.&lt;/p&gt;

&lt;h2 id=&quot;making-the-sights-pretty&quot;&gt;Making the sights pretty&lt;/h2&gt;

&lt;p&gt;The home assistant API is up and accessible, so let’s use it. For now I’m only interested in switching one entity’s state - to get started I want three straightforward shell scripts: get state, switch on, switch off&lt;/p&gt;

&lt;p&gt;Home assistant docs give us all we need for this, and I’m going to use curl to perform the http calls. However, the naked curl command is either very verbose (in case of the GET statement), or too silent (for the POST actions) - I want some friendly feedback!&lt;/p&gt;

&lt;h3 id=&quot;get-switch-state&quot;&gt;GET switch state&lt;/h3&gt;

&lt;p&gt;For the GET state case, there is a very nice command line tool to work with json data for filtering, pretty-printing and more: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt;. Which I didn’t know about until today, so that’s a win right there! Using jq, my get-state script looks like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash
curl -s -X GET \
  -H &quot;Authorization: Bearer `cat api.token`&quot; \
  -H &quot;Content-Type: application/json&quot; \
  http://192.168.0.10:8123/api/states/switch.power_smartplug_1 \
  | jq '.state?'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Quite simple I’d say - after some playing around, I settled on a jq filter that reduces the curl output to just the value of the state property returned by the GET call: if the switch is off, the command will simply give us an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;off&quot;&lt;/code&gt;. Nice, works for me!&lt;/p&gt;

&lt;h3 id=&quot;post-to-change-switch-state&quot;&gt;POST to change switch state&lt;/h3&gt;

&lt;p&gt;When POSTing to the home assistant endpoint to switch power on or off, normally curl will just give us the (empty) body returned by the http request. That is not a lot - I want to see the http response code at least. There are many ways to skin this cat - after playing around with some options the internet offered, I decided to go with this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash
curl -is -X POST \
  -H &quot;Authorization: Bearer `cat api.token`&quot; \
  -H &quot;Content-Type: application/json&quot; \
  -d '{&quot;entity_id&quot;: &quot;switch.power_smartplug_1&quot;}' \
  http://192.168.0.10:8123/api/services/switch/turn_on \
  | head -n1  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s&lt;/code&gt; switches tell curl to show http result information, but be silent otherwise. This will get us five lines of info about the http response - the http status code with a nice String representation (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP/1.1 200 OK&lt;/code&gt;), plus content-type, -length, date etc. That is nice but I’d rather just have the first line (the http status code). This can be done by piping the entire thing through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head&lt;/code&gt; command, telling it to just return the first line it’s seeing (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-n1&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;settling-down-for-the-day&quot;&gt;Settling down for the day&lt;/h2&gt;

&lt;p&gt;That’s it, actually! We have three simple scripts that get us the cluster status, and can turn it on and off (modifying the POST script above to turn the cluster off is left as an exercise to the reader ;-) ). There might be follow-on ideas in the future, but for now I’m at the end of this little detour.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;waymarks&quot;&gt;Waymarks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;main takeaway from today is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; tool&lt;/li&gt;
  &lt;li&gt;got some more knowledge about using curl&lt;/li&gt;
  &lt;li&gt;much happiness with home assistant! I love that system more each time I add something to it&lt;/li&gt;
  &lt;li&gt;added an image to this post, first time; figured out how to do sizing in jekyll/markdown&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniel Krippner</name><email>dk.mailbox@gmx.net</email></author><summary type="html">The last few days we paused on the journey, doing real-world things involving a guitar and some frustration. Tonight, there was an idea I wanted to follow up on: when I cobbled together my Raspi k8s cluster, I grabbed a zigbee power switch I had lying around, to be able to switch the entire cluster on or off easily.</summary></entry><entry><title type="html">Jekyll build via github Actions</title><link href="https://www.danielkrippner.de/jekyllgithub" rel="alternate" type="text/html" title="Jekyll build via github Actions" /><published>2021-05-01T00:00:00-05:00</published><updated>2021-05-01T00:00:00-05:00</updated><id>https://www.danielkrippner.de/jekyllgithub</id><content type="html" xml:base="https://www.danielkrippner.de/jekyllgithub">&lt;p&gt;Not quite ‘professional’ yet - but, another step. We created a &lt;a href=&quot;https://github.com/AnotherDaniel/messages-env/blob/main/.github/workflows/build_package.yml&quot;&gt;github Actions configuration&lt;/a&gt; that builds our jekyll site on commit, then packages the nginx container (from arm64) and pushes it to the github package registry.&lt;/p&gt;

&lt;p&gt;Why we did this, instead of continuing running the build pipe on our own infrastructure? I’m looking to a way to shut down my notebook right after committing a diary update, and to be able to do that the Cx pipeline would need to run on my homecentral Raspi. So I tried to set that up, and found that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll/jekyll&lt;/code&gt; docker image is only available to x86/amd64 architectures. I followed this finding up with some fooling around with other jekyll-related docker images that are available for arm64, but… nothing that just worked as a drop-in replacement with my setup.
So it was either re-writing my setup to work with one of the arm64 jekyll images, or re-write my setup directly as a github Actions pipeline (and perhaps set myself up for public hosting on github pages, later).&lt;/p&gt;

&lt;h2 id=&quot;deploying-at-home-still&quot;&gt;Deploying at home, still&lt;/h2&gt;

&lt;p&gt;To complement the new build, I figured out how to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose pull&lt;/code&gt; from there, to get the site image running on homecentral. No huge deal - once I figured out how to create a login token in the github settings menus. The slightly updated docker-compose.yml looks like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker.pkg.github.com/anotherdaniel/messages-env/messages-env:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8000:80&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unless-stopped&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;healthcheck&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wget -q --spider http://192.168.0.10:8000 || exit &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1m43s&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10s&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Seems to work for now! Only remaining question: how to trigger update on homecentral? Hm…&lt;/p&gt;

&lt;h3 id=&quot;deferred-update-of-docker-container-on-homecentral-raspi&quot;&gt;Deferred update of docker container on homecentral Raspi&lt;/h3&gt;

&lt;p&gt;Ok, this is where things become somewhat awkward, for now. We have a nice github Actions build running, and push our image to the github package registry - but still want to host it on our homecentral Raspi. With auto-updating after we pushed and built new content!
The way I chose for now involves the git pre-push hook calling an ansible playbook that fire&amp;amp;forgets a script on the Raspi, which waits for a couple of minutes (for the github build to run), then pulls and recreates the nginx/jekyll image. The playbook can be &lt;a href=&quot;https://github.com/AnotherDaniel/messages-env/blob/main/ansible/playbooks/delayedUpgrade.yml&quot;&gt;found here&lt;/a&gt;, and the delayed-upgrade script looks like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;120
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/ubuntu/dockercompose/jekyll
&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;TOKEN.txt | docker login https://docker.pkg.github.com &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; AnotherDaniel &lt;span class=&quot;nt&quot;&gt;--password-stdin&lt;/span&gt;
docker-compose pull
docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--remove-orphans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;waymarks&quot;&gt;Waymarks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fix jekyll navigation links for our purposes: DONE&lt;/li&gt;
  &lt;li&gt;Build and update on Raspi? Solution decided on, and DONE (see above)&lt;/li&gt;
  &lt;li&gt;This is brittle and non-elegant. Probably move to github pages hosting soon.&lt;/li&gt;
  &lt;li&gt;Created my first git hook script&lt;/li&gt;
  &lt;li&gt;Learned about ansible - “become” means root, and the working directory of a script exec command is probably user-home (instead of the location of the executed script)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniel Krippner</name><email>dk.mailbox@gmx.net</email></author><summary type="html">Not quite ‘professional’ yet - but, another step. We created a github Actions configuration that builds our jekyll site on commit, then packages the nginx container (from arm64) and pushes it to the github package registry.</summary></entry></feed>